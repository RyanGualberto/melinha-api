generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  phoneNumber String    @unique
  password    String
  role        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  addresses   Address[]
  orders      Order[]
}

model Address {
  id         String   @id @default(uuid())
  address    String
  number     String
  complement String
  reference  String
  district   String
  city       String
  state      String
  country    String
  name       String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id              String           @id @default(uuid())
  title           String
  description     String
  price           Float
  status          String
  image           String
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      String
  productVariants ProductVariant[]
  orderItem       OrderItem[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductVariant {
  id                       String                  @id @default(uuid())
  name                     String
  price                    Float
  status                   String
  productId                String
  product                  Product                 @relation(fields: [productId], references: [id])
  ProductVariantCategory   ProductVariantCategory? @relation(fields: [productVariantCategoryId], references: [id])
  productVariantCategoryId String?
  OrderItem                OrderItem[]
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
}

model ProductVariantCategory {
  id              String           @id @default(uuid())
  name            String
  productVariants ProductVariant[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  status        String
  total         Float
  paymentMethod String // Ex: "Cart√£o", "Dinheiro", "Pix"
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}
