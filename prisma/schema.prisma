generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  email        String    @unique
  phoneNumber  String    @unique
  password     String
  role         String
  resetToken   String?
  resetExpires DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  addresses    Address[]
  orders       Order[]

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  address    String
  number     String
  complement String?
  reference  String?
  district   String
  city       String
  state      String
  country    String
  name       String
  zipCode    String
  principal  Boolean
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order[]

  @@map("addresses")
}

model Product {
  id              String           @id @default(uuid())
  title           String
  description     String
  price           Float
  status          ProductStatus
  image           String
  category        Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      String
  cost            Float            @default(0)
  index           Int              @default(0)
  productVariants ProductVariant[]
  orderProduct    OrderProduct[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("products")
}

model Category {
  id          String         @id @default(uuid())
  name        String
  description String?
  status      CategoryStatus @default(ACTIVE)
  index       Int            @default(0)
  products    Product[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("categories")
}

model ProductVariant {
  id                       String                  @id @default(uuid())
  name                     String
  price                    Float
  status                   ProductVariantStatus
  productId                String
  image                    String
  product                  Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariantCategory   ProductVariantCategory? @relation(fields: [productVariantCategoryId], references: [id], onDelete: Cascade)
  productVariantCategoryId String?
  orderProduct             OrderProduct[]
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt

  @@map("product_variants")
}

model ProductVariantCategory {
  id              String                     @id @default(uuid())
  name            String
  productVariants ProductVariant[]
  max             Int?
  type            ProductVariantCategoryType @default(MULTIPLE)
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt

  @@map("product_variant_categories")
}

model Order {
  id              String   @id @default(uuid())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  addressId       String?
  address         Address? @relation(fields: [addressId], references: [id], onDelete: SetNull)
  isWithdrawal    Boolean? @default(false)
  addressSnapshot Json?
  userSnapshot    Json

  products      OrderProduct[]
  status        OrderStatus    @default(PENDING)
  observation   String?
  total         Float
  discount      Float?
  deliveryTime  Int            @default(30)
  deliveryCost  Float
  paymentMethod String
  paymentChange Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("orders")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  productTitleSnapshot String
  productPriceSnapshot Float

  observation String?
  quantity    Int
  price       Float
  variants    OrderProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: SetNull)
  productVariantId String?

  @@map("order_products")
}

model OrderProductVariant {
  id             String       @id @default(uuid())
  orderProductId String
  orderProduct   OrderProduct @relation(fields: [orderProductId], references: [id], onDelete: Cascade)

  variantName  String
  variantPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_product_variants")
}

model StoreSettings {
  id           String  @id @default(uuid())
  instagram    String
  whatsapp     String
  email        String
  deliveryTime Int     @default(30)
  opened       Boolean
  orderMinimum Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("store_settings")
}

enum OrderStatus {
  PENDING // Pedido recebido, mas não processado
  IN_PROGRESS // Pedido em preparação
  DELIVERY_IN_PROGRESS // Pedido a caminho
  COMPLETED // Pedido finalizado e entregue
  CANCELED // Pedido cancelado
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  SHORTLY
}

enum ProductVariantStatus {
  ACTIVE
  INACTIVE
  SHORTLY
}

enum ProductVariantCategoryType {
  SINGLE
  MULTIPLE
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}
