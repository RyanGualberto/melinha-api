generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  first_name    String
  last_name    String
  email        String    @unique
  phone_number String    @unique
  password     String
  role         String
  created_at   DateTime
  updated_at   DateTime
  addresses    Address[]
  orders       Order[]
}

model Address {
  id         String   @id @default(uuid())
  address    String
  number     String
  complement String
  reference  String
  district   String
  city       String
  state      String
  country    String
  name       String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  status     String
  created_at DateTime
  updated_at DateTime
}

model Product {
  id              String           @id @default(uuid())
  title           String
  description     String
  price           Float
  status          String
  image           String
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      String
  productVariants ProductVariant[]
  OrderItem       OrderItem[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  products    Product[]
}

model ProductVariant {
  id                       String                  @id @default(uuid())
  name                     String
  price                    Float
  status                   String
  productId                String
  product                  Product                 @relation(fields: [productId], references: [id])
  ProductVariantCategory   ProductVariantCategory? @relation(fields: [productVariantCategoryId], references: [id])
  productVariantCategoryId String?
  OrderItem                OrderItem[]
}

model ProductVariantCategory {
  id              String           @id @default(uuid())
  name            String
  productVariants ProductVariant[]
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  status        String
  total         Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  paymentMethod String // Ex: "Cart√£o", "Dinheiro", "Pix"
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float
}
